# Define SciTE settings for LSL (Linden Scripting Language, see http://secondlife.com)
# v3 by Ezhar Fairlight
# %SHILL_UPDATE_NOTICE%

file.patterns.lsl=*.lsl;*.esl
lexer.$(file.patterns.lsl)=cpp

filter.cpp=LSL (lsl esl)|$(file.patterns.lsl)|

# LSL Wiki online help
command.help.$(file.patterns.lsl)="http://secondlife.com/badgeo/wakka.php?wakka=$(CurrentWord)"
command.help.subsystem.$(file.patterns.lsl)=2

# ESL files use the C preprocessor (Hugh Perkins)
# set to 0 to strip comments (smaller LSL output, useful if your'e hitting the 64kb limit)
NO_STRIP_COMMENT=1

if NO_STRIP_COMMENT
	esl.strip.comment=/C
#command.compile.*.esl=cmd /c cl /nologo /X /u $(esl.strip.comment) /Tc"$(FileNameExt)" /EP >"$(FileNameExt).tmp" && "$(SciteDefaultHome)\SciTE.exe" "-open:$(FileNameExt).tmp"
#command.compile.*.esl=cmd /c cl /nologo /X /u $(esl.strip.comment) /Tc"$(FileNameExt)" /EP >"$(FileName).lsl"
# preprocess ESL script, strip whitespace and write LSL file
command.compile.*.esl=cmd /c cl /nologo /X /u $(esl.strip.comment) /Tc"$(FileNameExt)" /EP >"$(FileName).wsl" && "$(SciteDefaultHome)\stripper.exe" "$(FileName).wsl" "$(FileName).lsl" && del "$(FileName).wsl"

# put LSL or ESL script into clipboard
command.go.$(file.patterns.lsl)="$(SciteDefaultHome)\clipboard.exe" "$(FileName).lsl"
#command.go.needs.*.esl=cmd /c cl /nologo /X /u $(esl.strip.comment) /Tc"$(FileNameExt)" /EP >"$(FileName).lsl"
# ESL scripts are "compiled" first, then the resulting LSL file is put into clipboard (by the line above)
command.go.needs.*.esl=$(command.compile.*.esl)
#cmd /c cl /nologo /X /u $(esl.strip.comment) /Tc"$(FileNameExt)" /EP >"$(FileName).wsl" && "$(SciteDefaultHome)\stripper.exe" "$(FileName).wsl" "$(FileName).lsl" && del "$(FileName).wsl" && "$(SciteDefaultHome)\clipboard.exe" "$(FileName).lsl"


# Preprocessor settings
preprocessor.symbol.$(file.patterns.cpp)=#
preprocessor.start.$(file.patterns.cpp)=if ifdef ifndef
preprocessor.middle.$(file.patterns.cpp)=else elif
preprocessor.end.$(file.patterns.cpp)=endif

# API for calltips and symbol completion
api.$(file.patterns.lsl)=$(SciteDefaultHome)/lsl.api

# standard keywords, types and states
keywords.$(file.patterns.lsl)=default state \
integer float string key vector rotation list \
for do while if else jump return

# events, constants and functions
keywords2.$(file.patterns.lsl)=default state integer float string key vector rotation list \
START:events
%name% \
END:events
START:constants
%name% \
END:constants
for do while if else jump return \
START:functions
%name% \
END:functions
ZDRRDZ_LAST_LINE_PLACEHOLDER

#word.characters.$(file.patterns.lsl)=$(chars.alpha)$(chars.numeric)_
comment.block.cpp=//~
comment.block.at.line.start.cpp

statement.indent.$(file.patterns.lsl)=5 default state for do while if else
statement.end.$(file.patterns.lsl=10 ;
statement.lookback.$(file.patterns.lsl)=20

block.start.$(file.patterns.lsl)=10 {
block.end.$(file.patterns.lsl)=10 }

# autocomplete
autocomplete.cpp.ignorecase=0
autocomplete.cpp.start.characters=(
autocomplete.cpp.fillups=(

# calltips
calltip.cpp.ignorecase=0
calltip.cpp.word.characters=_$(chars.alpha)$(chars.numeric)
calltip.cpp.end.definition=)

# Default
style.cpp.32=$(font.base)
# White space
style.cpp.0=fore:#808080
# Block Comment
style.cpp.1=fore:#FF0000,$(font.code.comment.box)
# Line Comment
style.cpp.2=$(colour.code.comment.line),$(font.code.comment.line)
# Doc comment
style.cpp.3=fore:#FF0000,$(font.code.comment.doc)
# Number
style.cpp.4=$(colour.number)
# Keyword
style.cpp.5=$(colour.keyword),bold
# Double quoted string
style.cpp.6=$(colour.string)
# Single quoted string
style.cpp.7=$(colour.char)
# UUIDs (only in IDL)
style.cpp.8=fore:#804080
# Preprocessor
style.cpp.9=$(colour.preproc)
# Operators
style.cpp.10=$(colour.operator),bold
# Identifiers
style.cpp.11=
# End of line where string is not closed
style.cpp.12=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
# Verbatim strings for C#
style.cpp.13=fore:#007F00,$(font.monospace),back:#E0FFE0,eolfilled
# Regular expressions for JavaScript
style.cpp.14=fore:#3F7F3F,$(font.monospace),back:#E0F0FF,eolfilled
# Doc Comment Line
style.cpp.15=$(colour.code.comment.doc),$(font.code.comment.doc)
# Keywords2
style.cpp.16=fore:#B00040
# Comment keyword
style.cpp.17=fore:#3060A0,$(font.code.comment.doc)
# Comment keyword error
style.cpp.18=fore:#804020,$(font.code.comment.doc)
# Braces are only matched in operator style
braces.cpp.style=10
