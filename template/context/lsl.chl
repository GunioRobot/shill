//////////////////////////////////////////////////////////////////////////////
// LSL -- Linden Scripting Language for SecondLife (www.secondlife.com)
//
// v1.0 07/10/2006 First release by Sir Grelling (sir.grelling@yahoo.com)
// %SHILL_UPDATE_NOTICE%
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// language name

Language:               LSL


//////////////////////////////////////////////////////////////////////////////
// put whatever you want here, short description, author name, email address..

Description:            LSL scripting language for SecondLife (www.secondlife.com) written by Sir Grelling (sir.grelling@yahoo.com)


//////////////////////////////////////////////////////////////////////////////
// default file filter
// note: if more than one extension is associated, eg:
// C/C++ files (*.c,*.cpp,*.h,*.hpp)|*.c;*.cpp;*.h;*.hpp

Filter:                 LSL files (*.lsl) | *.lsl


//////////////////////////////////////////////////////////////////////////////
// help file which will be invokend when F1 is pressed

// Put your path here!!!

HelpFile:               C:\Program Files\SecondLife\help\index.html


//////////////////////////////////////////////////////////////////////////////
// language case sensitivity
//                      0  - no
//                      1  - yes

CaseSensitive:          1


//////////////////////////////////////////////////////////////////////////////
// comment type: LineComment - comment to the end of line
// BlockCommentBeg - block comment begin, it could be
// multiline
// BlockCommentEnd - block comment end

LineComment:            //
BlockCommentBeg:
BlockCommentEnd:


//////////////////////////////////////////////////////////////////////////////
// identifier characters
// note: characters shouldn't be delimited, except arrays
// array of chars could be defined as from_char..to_char

IdentifierBegChars:     $ a..z A..Z _
IdentifierChars:        a..z A..Z _ 0..9

//////////////////////////////////////////////////////////////////////////////
// numeric constants begin characters
// note: characters shouldn't be delimited, except arrays
// array of chars could be defined as from_char..to_char
// number always starts with 0..9 except when NumConstBeg
// defines other

NumConstBegChars:       0..9


//////////////////////////////////////////////////////////////////////////////
// numeric constants characters
// note: characters shouldn't be delimited, except arrays
// array of chars could be defined as from_char..to_char
// number always starts with 0..9 except when NumConstBeg
// defines other

NumConstChars:          0..9


//////////////////////////////////////////////////////////////////////////////
// escape character

EscapeChar:                 \


//////////////////////////////////////////////////////////////////////////////
// keyword table
// note: delimited with spaces, lines could be wrapped
// you may divide keywords into two groups which can be
// highlighted differently


KeyWords1: default state for if else do while jump return

KeyWords2: integer float vector rotation key string list

KeyWords3: 
START:functions
%name%
END:functions

KeyWords4:
START:events
%name%
END:events

KeyWords5: 
START:constants
%name%
END:constants

//////////////////////////////////////////////////////////////////////////////
// string delimiter: StringBegChar - string begin char
// StringEndChar - string end char
// MultilineStrings - enables multiline strings, as perl
// has it

StringBegChar:          "
StringEndChar:          "
MultilineStrings:       0


//////////////////////////////////////////////////////////////////////////////
// use preprocessor: 0 - no
// 1 - yes
// note: if yes, '#' and statements after it will be
// highlighted with Preprocessor defined colors

// we use this to make an additional comment

UsePreprocessor:        0


//////////////////////////////////////////////////////////////////////////////
// highlight line: 0 - no
// 1 - yes
// note: if yes, current line will be highlighted

CurrLineHighlighted:    1


//////////////////////////////////////////////////////////////////////////////
// colors
// note:                first value is foreground, second is background color
//                        and third (optional) represents font attribute:
//                        B - bold
//                        I - italic
//                        U - underline
//                        S - strike out
//                        attributes can be combined: eg. B or BI
//                      as value, it could be used any standard windows color:
//                        clBlack, clMaroon, clGreen, clOlive, clNavy,
//                        clPurple, clTeal, clGray, clSilver, clRed, clLime,
//                        clYellow, clBlue, clFuchsia, clAqua, clLtGray,
//                        clDkGray, clWhite, clScrollBar, clBackground,
//                        clActiveCaption, clInactiveCaption, clMenu, clWindow,
//                        clWindowFrame, clMenuText, clWindowText, clCaptionText,
//                        clActiveBorder, clInactiveBorder, clAppWorkSpace,
//                        clHighlight, clHighlightText, clBtnFace, clBtnShadow,
//                        clGrayText, clBtnText, clInactiveCaptionText,
//                        clBtnHighlight, cl3DDkShadow, cl3DLight, clInfoText,
//                        clInfoBk
//                      as value, it could be used hex numeric constant too:
//                        $BBGGRR - BB: blue, GG: green, RR: red, eg: $FF6A00

SpaceCol:               clWindowText clWindow
Keyword1Col:            clBlue clWindow
Keyword2Col:            $00007700 clWindow
Keyword3Col:            $000000A0 clWindow
Keyword4Col:            $00A0A000 clWindow
Keyword5Col:            $00A00000 clWindow
IdentifierCol:          clWindowText clWindow
CommentCol:             $000077FF clWindow
NumberCol:              clWindowText clWindow
StringCol:              $0000A000 clWindow
SymbolCol:              clWindowText clWindow
PreprocessorCol:        clGray clWindow
SelectionCol:           clWhite clNavy
CurrentLineCol:         clBlack $00C0FFFF
OverrideTxtFgColor:     0
BlockAutoindent:        1
BlockBegStr:            {
BlockEndStr:            }
MatchedBracesCol:       clFuchsia clWindow

